<!-- Usage:
<ClientScript>
    <script>
    function MyFunction(id, a, b, c)
    {
        // do something
    }
    </script>
</ClientScript>

or:

<ClientScript src="uri" onload="handler"></ClientScript>

In your Shared folder, create a component named ClientScript.razor and place the contents of this file

based on: https://github.com/dotnet/aspnetcore/issues/16218
-->

@using System.Text;
@using Microsoft.AspNetCore.Components.Rendering;
@using Microsoft.AspNetCore.Components.RenderTree;
@inject Microsoft.JSInterop.IJSRuntime JSRuntime;

@if (type != "text/javascript")
{
    <script type="@type" suppress-error="BL9992">
        @script
    </script>
}

@code
{
    [Parameter]
    public RenderFragment script { get; set; }

    [Parameter]
    public string onload { get; set; }

    [Parameter]
    public string src { get; set; }

    [Parameter]
    public string type { get; set; } = "text/javascript";

    protected override bool ShouldRender() => false; // important!!

    #pragma warning disable BL0006 // Do not use RenderTree types

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender && type == "text/javascript")
        {
            var sb = new StringBuilder();
            if (script != null)
            {
                var rtb = new RenderTreeBuilder();
                script.Invoke(rtb);

                foreach (var frame in rtb.GetFrames().Array)
                {
                    if (frame.FrameType == RenderTreeFrameType.Markup)
                    {
                        sb.AppendLine(frame.MarkupContent);
                    }
                }
            }
            else if (!string.IsNullOrEmpty(src))
            {
                sb.AppendLine("var script = document.createElement('script');");
                if (!string.IsNullOrWhiteSpace(onload))
                    sb.AppendLine($"script.onload = {onload};");
                sb.AppendLine($"script.src = '{src}';");
                sb.AppendLine("document.body.appendChild(script);");
            }

            var output = sb.ToString().Trim();
            if (!string.IsNullOrWhiteSpace(output))
            {
                await JSRuntime.InvokeVoidAsync("eval", output);
            }
        }
    }
    #pragma warning restore BL0006 // Do not use RenderTree types
}
